{"collection":[{"query":"Giai thuat tim kiem nhi phan","description":"Muon tim hieu ve giai thuat tim kiem nhi phan, tat ca cac trang lien quan den tim kiem nhi phan:Dinh nghia, thuat toan ","sites":[{"title":"Giải thuật tìm kiếm nhị phân (Binary Search)","url":"http:\/\/vietjack.com\/cau-truc-du-lieu-va-giai-thuat\/giai-thuat-tim-kiem-nhi-phan.jsp","content":"Binany Search (Tìm kiếm nhị phân) là một giải thuật tìm kiếm nhanh với độ phức tạp thời gian chạy là Ο(log n). Giải thuật tìm kiếm nhị phân làm việc dựa trên nguyên tắc chia để trị (Divide and Conquer). Để giải thuật này có thể làm việc một cách chính xác thì tập dữ liệu nên ở trong dạng đã được sắp xếp. Binary Search tìm kiếm một phần tử cụ thể bằng cách so sánh phần tử tại vị trí giữa nhất của tập dữ liệu. Nếu tìm thấy kết nối thì chỉ mục của phần tử được trả về. Nếu phần tử cần tìm là lớn hơn giá trị phần tử giữa thì phần tử cần tìm được tìm trong mảng con nằm ở bên phải phần tử giữa; nếu không thì sẽ tìm ở trong mảng con nằm ở bên trái phần tử giữa. Tiến trình sẽ tiếp tục như vậy trên mảng con cho tới khi tìm hết mọi phần tử trên mảng con này. Để Binary Search làm việc thì mảng phải cần được sắp xếp. Để tiện cho việc theo dõi, mình sẽ cung cấp thêm các hình minh họa tương ứng với mỗi bước. Giả sử chúng ta cần tìm vị trí của giá trị 31 trong một mảng bao gồm các giá trị như hình dưới đây bởi sử dụng Binary Search: Đầu tiên, chúng ta chia mảng thành hai nửa theo phép toán sau: Với ví dụ trên là 0 + (9 \u2013 0)\/ 2 = 4 (giá trị là 4.5). Do đó 4 là chỉ mục giữa của mảng. Bây giờ chúng ta so sánh giá trị phần tử giữa với phần tử cần tìm. Giá trị phần tử giữa là 27 và phần tử cần tìm là 31, do đó là không kết nối. Bởi vì giá trị cần tìm là lớn hơn nên phần tử cần tìm sẽ nằm ở mảng con bên phải phần tử giữa. Chúng ta thay đổi giá trị ban-đầu thành chỉ-mục-giữa + 1 và lại tiếp tục tìm kiếm giá trị chỉ-mục-giữa. Bây giờ chỉ mục giữa của chúng ta là 7. Chúng ta so sánh giá trị tại chỉ mục này với giá trị cần tìm. Giá trị tại chỉ mục 7 là không kết nối, và ngoài ra giá trị cần tìm là nhỏ hơn giá trị tại chỉ mục 7 do đó chúng ta cần tìm trong mảng con bên trái của chỉ mục giữa này. Tiếp tục tìm chỉ-mục-giữa lần nữa. Lần này nó có giá trị là 5. So sánh giá trị tại chỉ mục 5 với giá trị cần tìm và thấy rằng nó kết nối. Do đó chúng ta kết luận rằng giá trị cần tìm 31 được lưu giữ tại vị trí chỉ mục 5. Binary Search chia đôi lượng phần tử cần tìm và do đó giảm số lượng phép so sánh cần thực hiện nên giải thuật tìm kiếm này được thực hiện khá nhanh. Dưới đây là code mẫu cho giải thuật tìm kiếm nhị phân: Để tìm hiểu sự triển khai code đầy đủ của giải thuật tìm kiếm nhị phân trong ngôn ngữ C, mời bạn click chuột vào chương: Tìm kiếm nhị phân (Binary Search) trong C. Loạt bài hướng dẫn Cấu trúc dữ liệu và giải thuật của chúng tôi dựa trên nguồn tài liệu của trang: Tutorialspoint Follow fanpage của team https:\/\/www.facebook.com\/vietjackteam\/ hoặc facebook cá nhân Nguyễn Thanh Tuyền https:\/\/www.facebook.com\/tuyen.vietjack để tiếp tục theo dõi các loạt bài mới nhất về Java,C,C++,Javascript,HTML,Python,Database,Mobile.... mới nhất của chúng tôi. Bài học Cấu trúc dữ liệu và giải thuật phổ biến tại vietjack.com: Các loạt bài khác: 160 bài học ngữ pháp tiếng Anh hay nhất 155 bài học Java tiếng Việt hay nhất 100 bài học Android tiếng Việt hay nhất 247 bài học CSS tiếng Việt hay nhất 197 thẻ HTML cơ bản 297 bài học PHP 85 bài học C# hay nhất 101 bài học C++ hay nhất 97 bài tập C++ có giải hay nhất 208 bài học Javascript có giải hay nhất Học tiếng Anh tại vietjack.com: 160 bài học ngữ pháp tiếng Anh hay nhất 160 bài tập ngữ pháp tiếng Anh hay nhất 72 bài ngữ pháp thực hành 50 tình huống tiếng Anh thông dụng 120 bí kíp luyện phần V TOEIC Trang web chia sẻ nội dung miễn phí dành cho người Việt. soạn văn lớp 8 , soạn văn lớp 9 , soạn văn lớp 10 , soạn văn lớp 11 , soạn văn lớp 12 , soạn văn lớp 6 , soạn văn lớp 7 , giải toán 6 , giải toán 7 , giải toán 8 , giải toán 9 , giải toán 10 , giải toán 11 , giải toán 12 , 66 Kim Hoa, Đống Đa, Hà Nội Phone: 01689933602 Email: vietjackteam@gmail.com 2015 © All Rights Reserved.","relevance":1},{"title":"[Chia để trị] Tìm kiếm nhị phân - writes - Dạy Nhau Học","url":"https:\/\/daynhauhoc.com\/t\/chia-de-tri-tim-kiem-nhi-phan\/6516","content":"Mở loạt bài về giải thuật (thật sự thì trình em gà, học được gì share cái đó thôi), em nghĩ em sẽ bắt đầu trước từ thuật toán chia để trị (devide to conquer). Về thuật toán chia để trị: Trong khoa học máy tính, chia để trị là một mô hình thiết kế thuật toán quan trọng dựa trên đệ quy với nhiều phân nhánh. Thuật toán chia để trị hoạt động bằng cách chia bài toán thành nhiều bài toán nhỏ hơn thuộc cùng thể loại, cứ như vậy lặp lại nhiều lần, cho đến khi bài toán thu được đủ đơn giản để có thể giải quyết trực tiếp. Sau đó lời giải của các bài toán nhỏ được tổng hợp lại thành lời giải cho bài toán ban đầu. Kĩ thuật này là cơ sở cho nhiều thuật toán hiệu quả, chẳng hạn như thuật toán...  Ở đây, chắc mọi người đã quá quen với tìm kiếm nhị phân (binary search), và theo mình nghĩ (hướng dẫn thì cứ xưng như thế), mọi người thường dùng vòng lặp phải không (không phải cũng cứ coi như phải đi cho mình vui ) ? Vậy thì giờ đổi gió xíu nhé. Trong khoa học máy tính, thuật toán tìm kiếm nhị phân là một thuật toán dùng để tìm kiếm phần tử trong một danh sách đã được sắp xếp. Thuật toán hoạt động như sau. Trong mỗi bước, so sánh phần tử cần tìm với phần tử nằm ở chính giữa danh sách. Nếu hai phần tử bằng nhau thì phép tìm kiếm thành công và thuật toán kết thúc. Nếu chúng không bằng nhau thì tùy vào phần tử nào lớn hơn, thuật toán lặp lại bước so sánh trên với nửa đầu hoặc nửa sau của danh sách. Vì số lượng phần tử trong danh sách cần xe...  Ý tưởng: Ta sẽ tìm xem giá trị cần tìm có nằm trong mảng không, nếu có, trả về chỉ số (index) của phần tử đó, không thì trả về -1. Tạm gọi thằng cần tìm là key đi ha (@nhatlonggunz bắt đầu chém gió từ đây, đa số mọi người đều biết về tìm kiếm nhị phân nên bỏ qua phần ý tưởng này cũng được) Đưa về một chút cho hợp với đệ quy, ở đây không cách vào được nên viết mô tả (mã giã, pseudocode hay gì cũng được) hơi khó, thôi bỏ qua luôn đi. Nói chung là dùng đệ quy :v base case là khi mảng không còn phần tử nào (đầu mảng > cuối mảng) CODE ------------------------------C++----------------------------------  Tìm kiếm nhị phân thường thì nên dùng vòng lặp CODE ------------------------------C++----------------------------------  Em làm mấy bài cơ bản, mọi người gop ý OK rồi. Tìm hiểu thêm hàm lower_bound và upper_bound nữa. nó cũng là Tìm kiếm nhị phân nhưng trả về vị trí đầu và cuối của key. Có thể trả về số phần tử = key = upper_bound(a,a+n,key)-lower_bound(a,a+n,key); thờng thì tại mấy anh này làm biếng nên toàn dùng cái cơ bản cho mau dạng như test với 1 mô hình nhỏ thôi nhưng thật ra cách cơ bản thích hợp hơn với dạng test vì cách mà bạn nói thì phải sắp xếp mảng nữa rùi mới tiếp kiếm trong khi đó với cách cơ bản chỉ 3 4 dòng , mình cũng đồng ý là nó nhanh hơn vì loại nhìu phần tử k nhưng có lẻ đối với google hay mấy web lớn chương trình lớn mới dùng cách đó để tăng hiệu quá tìm kiếm còn mấy dạng như test thôi thì dùng cơ bản cho tiện phải sắp xếp mảng nữa rùi mới tiếp kiếm trong khi đó với cách cơ bản chỉ 3 4 dòng Chỉ thêm 2 dòng  có gì đâu mà dài dòng. Mình đang làm về thuật toán chia để trị, mà bài này là cơ bản của thuật toán đó nên mình mới lấy làm ví dụ thôi nha. Chứ theo mình thấy, dùng vòng lặp nhanh hơn cái này. anh có thể giải thích rõ hơn về cách dùng hàm sort không ạ? em search trên mạng thì hàm sort là sort(begin, end) và nó sắp xếp tăng dần, thế giảm dần thì dùng như nào ạ? ^^ anh có thể giải thích rõ hơn về cách dùng hàm sort không ạ? em search trên mạng thì hàm sort là sort(begin, end) và nó sắp xếp tăng dần, thế giảm dần thì dùng như nào ạ? ^^ Giảm dần thì có cái reverse(my_vector.begin(), my_vector.end()) Mình thắc mắc là con người\/ não của mình tìm kiếm mặc định theo thuật toán nào. Ví dụ như trên bàn bày ra một đống thẻ có đánh số và người ta đảo mắt một lát rồi lôi ra được thẻ có số lớn nhất\/ nhỏ nhất. Thì đó là tìm kiếm gì? Làm cách nào để máy tính tìm kiếm theo cách của con người? Ví dụ như đưa ra một bảng có khoảng vài chục con thú khác nhau, hỏi con nào là con mèo, người nhận ra phát một nhưng máy tính tìm thì quá rắc rối? Hình như cái đó gọi là Visual Search đó a Võ Thin đảo mắt một lát rồi lôi ra được thẻ có số lớn nhất\/ nhỏ nhất Em nghĩ là cũng lần lượt nhưng không cố định từ đâu về đâu Có thế đầu về cuối hoặc cuối về đầu. Có chăng thì giữa về hai bên Nhưng đó là với đống thẻ số lượng ít trong tầm mắt ta. Giả sử có một cái số lượng thẻ lớn vài mét. Khi đó vượt khỏi tầm mắt, thì ta cũng lại phải chạy lần lượt đi kiểm tra chứ cũng không sao mà đảo mắt một phát là ra ngay được khoảng vài chục con thú khác nhau, hỏi con nào là con mèo, Tương tự vì cái bảng đó ít nên chúng ta cũng nhìn là ra luôn. Sẵn tiềm thức biết con mèo là gì rồi Tóm lại theo em, não chúng ta cũng thực hiện tuần tự Với lượng ít thì vô cùng nhanh. Còn số lượng nhiều thì do lười nên việc tìm kiếm chậm trễ đệ quy evevy where :3 Powered by Discourse, best viewed with JavaScript enabled","relevance":1},{"title":"Giải Thuật Tìm Kiếm Nhị Phân - Người Sài Gòn Blog","url":"https:\/\/sites.google.com\/site\/nguoisaigonblog\/giai-thuat-tim-kiem-tuyen-tinh\/giai-thuat-tim-kiem-nhi-phan-dan-tri","content":"v  Ý tưởng thuật toán Tiến hành so sánh phần tử cần tìm cho trước với phần tử nằm ở vị trí giữa của dãy tìm kiếm , dựa vào kết quả so sánh này để quyết định giới hạn dãy tìm kiếm ở bước tiếp theo là nửa trên hay nửa dưới của phần tử giữa được so sánh cho đến khi đoạn so sánh bằng 0. v  Mã CODE int timnhiphan(int a[], int n, int x)  {       int left=0 ; right=n-1 ;       int mid ;    do {        mid=(left+right)\/2 ;        if(x==a[mid]) return mid ;            else if(x<a[mid]) right =mid-1 ;                      else left=mid+1 ;       } while(left<=right) ;     return -1 ;   } v  Ví dụ minh họa Cho dãy số a : 12   8  2  14  3  5  Tìm x=3    left =0, right=5, mid=3 12 8 2 14 3 5  x=3 left =4, right=5, mid=4 12 8 2 14 3 5  x=3 Tìm thấy x=3   v  Độ phức tạp Trường hợp tốt nhất  a[mid]= x .  T(n)=T(1)       O(1) Trường hợp xấu nhất O(log2n) Sưu Tầm  Sign in|Recent Site Activity|Report Abuse|Print Page|Powered By Google Sites","relevance":1},{"title":"THUẬT TOÁN TÌM KIẾM NHỊ PHÂN \u2013 Việt Nam Developer","url":"https:\/\/vndevpro.wordpress.com\/2016\/05\/02\/thuat-toan-tim-kiem-nhi-phan\/","content":"Nơi chia sẻ kiến thức nền tảng và chuyên sâu về lập trình Việt Nam Developer xin được giới thiệu đến các bạn rất hữu ích trong việc tìm kiếm phần tử trong mảng. Đó chính là thuật toán Tìm kiếm nhị phân. » Điều kiện áp dụng của thuật toán tìm kiếm nhị phân là mảng phải được sắp xếp. » Ý tưởng:  Dưới đây là giả mã của thuật toán tìm kiếm nhị phân : Giả sử trong dãy tìm kiếm hiện hành bao gồm các phần tử nằm trong A[left] à A[right], các bước của giải thuật được thực hiện như sau: » Bước 1: left = 0; right = 0 » Bước 2: » Bước 3: Nếu left <= right; Lặp lại bước 2; Ngược lại dừng. Cuối cùng là code demo cho chương trình tìm kiếm nhị phân :  #include <iostream> #include <conio.h> using namespace std; \/\/Nhap mang A void Nhap(int *A, int nA) { for(int i = 0; i < nA; i++) { cout <<\u201C\\nNhap a[ \u201C<<i <<\u201D ]: \u201C; cin >> A[i]; } } \/\/Xuat mang A void Xuat(int *A, int nA) { for(int i = 0; i < nA; i++) { cout <<A[i] << \u201C\\t\u201D; } } \/\/Sap xep mang A void Sort(int *A, int nA) { for(int i = 0; i <= nA \u2013 1; i++) for(int j = i + 1; j < nA; j++) if(A[i] > A[j]) swap(A[i], A[j]); } \/\/Tim kiem co x trong mang hay k int TimKiemNhiPhan(int*A, int nA, int x) { int left = 0; int right = nA \u2013 1; int mid; do { mid = (left + right) \/ 2; if(A[mid] == x) return 1; else if(A[mid] < x) left = mid + 1; else right = mid \u2013 1; }while(left <= right); return 0; } int main() { int nA; cout <<\u201CNhap nA:\u201D; cin >> nA; int* A = new int[nA]; Nhap(A, nA); Xuat(A, nA); int x; cout <<\u201C\\nTim so may: \u201C; cin >>x; Sort(A, nA); if(TimKiemNhiPhan(A, nA, x) == 1) cout <<\u201C\\nYes!\u201D; else cout <<\u201C\\nNo!\u201D; delete[] A; getch(); return 0; } Mời bạn điền thông tin vào ô dưới đây hoặc kích vào một biểu tượng để đăng nhập: Bạn đang bình luận bằng tài khoản WordPress.com ( Đăng xuất \/ Thay đổi ) Bạn đang bình luận bằng tài khoản Twitter ( Đăng xuất \/ Thay đổi ) Bạn đang bình luận bằng tài khoản Facebook ( Đăng xuất \/ Thay đổi ) Bạn đang bình luận bằng tài khoản Google+ ( Đăng xuất \/ Thay đổi ) Connecting to %s Notify me of new comments via email.   ","relevance":1},{"title":"Sử dụng thuật toán tìm kiếm nhị phân ???","url":"http:\/\/javaquestion.iowoi.org\/t1-topic","content":"You ask - We answer Tìm kiếm Display results as : Số bài Chủ đề Advanced Search  Java Question :: Ask here and wait for the answer       Admin on Tue Jun 15, 2010 8:32 pm     Admin on Tue Jun 15, 2010 8:33 pm      Java Question :: Ask here and wait for the answer ","relevance":1},{"title":"Tìm kiếm nhị phân (Binary search) - IEEV","url":"http:\/\/www.ieev.org\/2009\/05\/tim-kiem-nhi-phan-binary-search.html","content":"Nghiên cứu là để sẻ chia Tags : We are Developers Team do our best to create beautiful work for our clients. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.         ","relevance":1},{"title":"[Thuật toán] Tìm kiếm nhị phân:","url":"http:\/\/www.tinhoccoban.net\/2016\/03\/thuat-toan-tim-kiem-nhi-phan.html","content":"Học tập, chia sẻ kiến thức cơ bản về tin học.        © Tin học cơ bản 2013 . Powered by Blogger . Blogger templates . Social Networking Scripts . Posts RSS . Comments RSS","relevance":1},{"title":"THUẬT TOÁN TÌM KIẾM NHỊ PHÂN - Bài viết sưu tầm - Khoa Công nghệ thông tin - Đại học Duy Tân","url":"http:\/\/kcntt.duytan.edu.vn\/Home\/ArticleDetail\/vn\/128\/2750\/thuat-toan-tim-kiem-nhi-phan","content":"THUẬT TOÁN TÌM KIẾM NHỊ PHÂN Thuật toán này được dùng khi bảng liệt kê có các số hạng đã được sắp xếp theo thứ tự tăng dần (ví dụ: nếu các số hạng là các con số thì chúng được sắp từ số nhỏ nhất đến số lớn nhất; nếu chúng là các từ thì chúng được sắp theo thứ tự bảng chữ cái). Thuật toán thứ hai này được gọi là thuật toán tìm kiếm nhị phân. Nó được tiến hành bằng cách só sánh phần tử cần xác định vị trí với số hạng ở giữa bảng liệt kê. Sau đó bảng này được tách làm hai bảng con nhỏ hơn có kích thước như nhau hoặc hơn kém nhau một số hạng. Sự tìm kiếm tiếp tục bằng cách hạn chế tìm kiếm ở một bảng con thích hợp dựa trên việc so sánh phần tử cần xách định vị trí với số hạng giữa của bảng kê con. Trong mục 2.3, ta sẽ chứng minh rằng thuật toán tìm kiếm nhị phân hiệu quả hơn nhiều so với thuật toán tìm kiếm tuyến tính. Ví dụ dưới đây minh họa sự tìm kiếm nhị phân. VÍ DỤ 3. Để tìm sô 19 trong bảng liệt kê                         1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 15, 16, 18, 19, 20, 22. Ta tách bảng liệt kê gồm 16 số hạng này thành hai bảng liệt kê nhỏ hơn, mỗi bảng có tám số hạng, cụ thể là:             1, 2, 3, 5, 6, 7, 8, 10  và 12, 13, 15, 16, 18, 19, 20, 22. Sau đó, ta so sánh 19 với số hạng cuối cùng của bảng con thứ nhất. Vì 10 < 19, việc tìm kiếm 19 chỉ giới hạn trong bảng liệt kê con thứ hai từ số hạng thứ chín đến số hạng thứ mười sáu trong bảng ban đầu. Tiếp theo, ta lại tách bảng liệt kê con gồm tám số hạng này làm hai bảng con, mỗi bảng có bốn số hạng, cụ thể là:                         12, 13, 15, 16 và 18, 19, 20, 22. Vì 16 < 19, (so sánh 19 với số hạng cuối cùng của bảng con đầu tiên), việc tìm kiếm lại được giới hạn trong bảng liệt kê con thứ hai, từ số hạng thứ mười ba đến số hạng thứ mười sáu của bảng liệt kê ban đầu. Bảng liệt kê 18, 19, 20, 22 lại được tách làm hai, cụ thể là:                         18, 19 và 20, 22. Vì 19 không lớn hơn số hạng lớn nhất của bảng con thứ nhất \u2013 cũng là 19 \u2013 nên việc tìm kiếm giới hạn chỉ ở bảng con thứ nhất gồm các số 18, 19, là số hạng thứ mười ba và mười bốn của bảng ban đầu, Tiếp theo, bảng con chứ hai số hạng này lại được tách làm hai, mỗi bảng có một số hạng 18 và 19. Vì 18 < 19, sự tìm kiếm giới hạn chỉ trong bảng con thứ hai \u2013 bảng liệt kê chỉ chứa số hạng thứ mười bốn của bảng liệt kê ban đầu, số hạng đó là số 19. Bầy giờ sự tìm kiếm đã thu hẹp về chỉ còn một số hạng, so sánh tiếp cho thấy 19 là số hạng thứ mười bốn của bảng liệt kê ban đầu.             Bây giờ chúng ta có thể chỉ rõ các bước trong thuật toán tìm kiếm nhị phân. Để tìm được số nguyên x trong bảng liệt kê a1, a2, ..., an với a1 < a2 < ... < an, ta bắt đầu bằng việc so sánh x với số hạng am ở giữa cảu dãy, với m = (n+1)\/2. (Cần nhớ lại rằng [x] là số nguyên lớn nhất không vượt quá x.) Nếu x > am, việc tìm kiếm x giới hạn ở nửa thứ hai của dãy, gồm am+1, am+2, ..., an. Nếu x không lớn hơn am thì sự tìm kiếm giới hạn trong nửa đầu của dãy, gồm a1, a2, ..., am.             Bây giờ sự tìm kiếm chỉ giới hạn trong bảng liệt kê có không hơn [n\/2] phần tử. Dùng chính thủ túc trên, so sánh x với số hạng ở giữa của bảng liệt kê được hạn chế. Sau đó lại hạn chế việc tìm kiếm ở nửa thứ nhất hoặc nửa thứ hai của bảng liệt kê. Lặp lại quá trình này cho tới khi nhận được một bảng liệt kê chỉ có một số hạng. Sau đó, chỉ còn xác định số hạng này có phải là x hay không. Giải mã cho thuật toán tìm kiếm nhị phân được cho trong thuật toán 3. THUẬT TOÁN 3. Thuật toán tìm kiếm nhị phân. procedurebinary search(x: nguyên, a1, a2, ..., an: các số nguyên tăng dần) i:= 1 {i là điểm mút trái của khoảng tìm kiếm} j:= n {j là điểm mút phải của khoảng tìm kiếm} whilei < j begin             m := [(i + j)\/2] ifx > am then location := i elsej := m end if x = aithen location := i else location :=0. {location là chỉ số của số hạng bằng x hoặc là 0 nếu không tìm được x}             Thuật toán 3 tiến hành bằng cách thu hẹp liên tiếp phạm vi tìm kiếm của dãy. Ở bất kì giai đoạn nào, chỉ có các số hạng bắt đầu với ai hoặc kết thúc với aj là được xem xét. Nói cách khác, i và j là các chỉ số nhỏ nhất và lớn nhất của các số hạng còn lại tương ứng. Thuật toán 3 tiếp tục thu hẹp phạm vi tìm kiếm cho tới khi chỉ còn lại một phần tử của dãy. Khi đã làm đến đó, sự so sánh sẽ cho thấy có số hạng bằng x hay không. » Tin mới nhất: » Các tin khác: Hôm nay, ngày 23\/10\/2017 Tuần học: 12       © 2017 Đại học Duy Tân","relevance":1},{"title":"Tài liệu Giải Thuật Tìm Kiếm Nhị Phân chọn lọc - TaiLieu.VN","url":"http:\/\/tailieu.vn\/tag\/giai-thuat-tim-kiem-nhi-phan.html","content":"Bài giảng Cấu trúc dữ liệu: Chương 2 - Các giải thuật tìm kiếm và sắp thứ tự được biên soạn nhằm trang bị cho các bạn những kiến thức về giải thuật tìm kiếm (tìm kiếm tuyến tính, tìm kiếm nhị phân); các giải thuật sắp xếp nội. Mời các bạn tham khảo bài giảng để bổ sung thêm kiến thức về lĩnh vực này. 186p cocacola_10 02-12-2015 57 13   Download Bài giảng Các giải thuật tìm kiếm, sắp xếp bao gồm những nội dung về giải thuật tìm kiếm (tìm kiếm tuần tự, tìm kiếm nhị phân); giải thuật sắp xếp (Insertion sort, Selection sort, Bubble sort, Merge sort, Quick sort). Mời các bạn tham khảo bài giảng để bổ sung thêm kiến thức về lĩnh vực này. 98p cocacola_17 10-12-2015 31 4   Download Bài giảng Cấu trúc dữ liệu và giải thuật - Tìm kiếm gồm có những nội dung cơ bản sau: Bài toán tìm kiếm, tìm kiếm tuần tự, tìm kiếm nhị phân, cây quyết định. Mời các bạn cùng tham khảo để biết thêm những nội dung chi tiết. 14p youcanletgo_03 14-01-2016 5 1   Download Chương này trang bị cho người học những hiểu biết về cây tìm kiếm nhị phân cân bằng. Thông qua chương này người học có thể biết được đặc điểm của cấu trúc cây tìm kiếm nhị phân, biết được cây tìm kiếm nhị phân cân bằng \u2013 AVL tree là gì, biết cách khai báo cấu trúc 1 nút cây AVL,... Mời các bạn ùng tham khảo. 22p youcanletgo_03 14-01-2016 27 1   Download Bài giảng môn \"Cấu trúc dữ liệu - Chương 2: Kỹ thuật tìm kiếm (searching)\" trình bày các nội dung: Khái quát về tìm kiếm, các giải thuật tìm kiếm nội - Tìm kiếm trên mảng (tìm tuyến tính - Linear Search; tìm nhị phân - Binary Search); Các giải thuật tìm kiếm ngoại - Tìm kiếm trên tập tin (tìm kiến tuyến tính, tìm kiếm nhị phân). Mời các bạn cùng tham khảo nội dung chi tiết. 29p tsmttc_007 12-09-2015 20 4   Download Cho danh sách có n phần tử a0, a1, a2\u2026, an-1. Để đơn giản trong việc trình bày giải thuật ta dùng mảng 1 chiều a để lưu danh sách các phần tử nói trên trong bộ nhớ chính. Tìm phần tử có khoá bằng X trong mảng Giải thuật tìm kiếm tuyến tính (tìm tuần tự) Giải thuật tìm kiếm nhị phân Lưu ý: Trong quá trình trình bày thuật giải ta dùng ngôn ngữ lập trình C. 187p minhai 02-08-2010 307 217   Download * Tìm kiếm và sắp xếp là 2 bài toán rất kinh điển trong tin học * Tìm kiếm là thao tác được thực hiện nhiều nhất trong các hệ thống lưu trữ và quản lý dữ liệu - Tra từ điển, tìm kiếm sinh viên, tìm kiếm khách hàng... - Thao tác tìm kiếm sẽ thực hiện hiệu quả khi dữ liệu được tổ chức theo một trật tự nào đó. 0p nhatdang01 22-02-2011 314 130   Download Bắt đầu từ phần tử đầu tiên của danh sách, so sánh lần lượt từng phần tử của danh sách với giá trị X cần tìm. Nếu có phần tử bằng X thì trả về vị trí tìm thấy, thuật toán dừng lại (thành công). Giải thuật tìm kiếm tuần tự, nhị phân trên danh sách liên kết. 101p iamok147 19-07-2011 126 38   Download Đây là bước các SEOer quan tâm nhiều nhất. Sau khi website của bạn đã được index trong data center của Google. Nó sẽ được đánh giá và xếp hạng để hiển thị ra ngoài trang kết quả tìm kiếm (SERP) thông qua thuật toán của 79p possibletb 28-11-2012 86 37   Download Chương 2 của bài giảng Cấu trúc dữ liệu và thuật toán trang bị cho người học những kiến thức về tìm kiếm và sắp xếp. Trong chương này các bạn sẽ được tìm hiểu về các giải thuật tìm kiếm và các giải thuật sắp xếp. Mời các bạn cùng tham khảo để nắm bắt các nội dung chi tiết. 79p youcanletgo_02 04-01-2016 27 15   Download Bài giảng Cấu trúc dữ liệu và giải thuật: Chương 2 Giải Thuật Tìm Kiếm nhằm trình bày về khái niệm giải thuật tìm kiếm, tìm kiến tuyến tính, tìm kiếm nhị phân, bài giảng trình bày súc tích, có ví dụ minh họa giúp các bạn hiểu sâu hơn về giải Thuật Tìm Kiếm. 23p fast_12 25-06-2014 27 4   Download Bài giảng \"Cấu trúc dữ liệu và giải thuật - Chương 5: Các chiến lược tìm kiếm\" cung cấp cho người học các kiến thức: Giới thiệu các thao tác tìm kiếm phổ biến trong cuộc sống hàng ngày, các thuật toán tìm kiếm, tìm kiếm trình tự, thuật toán lính canh, tìm kiếm nhị phân và các thuật toán tìm kiếm nhị phân. Mời các bạn cùng tham khảo nội dung chi tiết. 54p tsmttc_007 11-09-2015 25 6   Download Bài giảng \"Cấu trúc dữ liệu và giải thuật - Chương 7: Tìm kiếm\" cung cấp cho sinh viên các kiến thức: Tìm kiếm tuần tự và tìm kiếm nhị phân, tìm kiếm trên cây nhị phân (cây nhị phân tìm kiếm, cây nhị phân tìm kiếm cân bằng (AVL)). Mời các bạn cùng tham khảo nội dung chi tiết. 23p nhasinhaoanh_09 13-10-2015 16 3   Download Bài giảng chương 2 cung cấp cho người học những kiến thức về các chiến lược chia để trị. Trong chương này người học sẽ tìm hiểu một số nội dung chính sau đây: Chiến lược chia để trị, Quicksort, xếp thứ tự bằng phương pháp trộn, xếp thứ tự ngoại, cây tìm kiếm nhị phân. Mời các bạn cùng tham khảo. 40p youcanletgo_01 04-01-2016 21 3   Download Bài giảng \"Cấu trúc dữ liệu và giải thuật - Chương 11: Cây đa phân\" cung cấp cho người học các kiến thức về: Định nghĩa cây đa phân, biểu diễn cây đa phân, biểu diễn dạng nhị phân, thiết kế Trie, giải thuật tìm kiếm trên Trie, mã C++ tìm kiếm trên Trie, giải thuật thêm vào Trie,... Mời các bạn cùng tham khảo nội dung chi tiết. 26p nhasinhaoanh_06 20-09-2015 16 6   Download Mục tiêu của bài giảng này nhằm giúp người học xác định được vai trò của tìm kiếm và sắp xếp trong hệ thống thông tin, nắm vững và minh họa được giải thuật tìm kiếm tuyến tính và tìm kiếm nhị phân trên mảng một chiều, cài đặt được giải thuật tìm kiếm bằng ngôn ngữ C\/C++. Mời các bạn cùng tham khảo để nắm bắt các nội dung chi tiết. 32p namthangtinhlang_02 04-11-2015 12 3   Download Bài giảng Cấu trúc dữ liệu và giải thuật trình bày một số kiến thức về tìm kiếm như: Bảng băm, một số phương pháp xây dự","relevance":1},{"title":"Thuật toán sắp xếp chèn trực tiếp dựa trên tìm kiếm nhị phân \u2013 Binary insertion sort - Thuật toán","url":"http:\/\/thuattoan.phamvanlam.com\/code-snippets\/thuat-toan-sap-xep-chen-truc-tiep-dua-tren-tim-kiem-nhi-phan-binary-insertion-sort\/","content":"Thuật toán Chia sẻ đầy đủ về các thuật toán và lời giải các bài toán cơ bản Thuật toán > Code Snippets > Thuật toán cơ bản > Thuật toán sắp xếp chèn trực tiếp dựa trên tìm kiếm nhị phân \u2013 Binary insertion sort lampv606 23\/09\/2016  ← Bài viết trước Bài tiếp theo → Tìm kiếm Chuyên mục Bài viết mới nhất Mạng xã hội Tag Bình luận gần đây Bình luận mới nhất Lưu trữ Liên Kết Phạm Văn Lâm Complete JavaScript Thuật toán Herokuapp LPDevs Github.io LPDevs","relevance":1},{"title":"Giải thuật tìm kiếm nhị phân - Tài liệu text","url":"http:\/\/toc.123doc.org\/document\/311209-giai-thuat-tim-kiem-nhi-phan.htm","content":"Tài liệu liên quan Tài liệu mới","relevance":1},{"title":"Tìm kiếm nhị phân là gì? Khái niệm, định nghĩa","url":"http:\/\/it.die.vn\/t\/tim-kiem-nhi-phan\/","content":"Home \/ Tìm hiểu: Tìm kiếm nhị phân Trong khoa học máy tính, thuật toán tìm kiếm nhị phân là một thuật toán dùng để tìm kiếm phần tử trong một danh sách đã được sắp xếp. Thuật toán hoạt động như sau. Trong mỗi bước, so sánh phần tử cần tìm với phần tử nằm ở chính giữa danh sách. Nếu hai phần tử bằng nhau thì phép tìm kiếm thành công và thuật toán kết thúc. Nếu chúng không bằng nhau thì tùy vào phần tử nào lớn hơn, thuật toán lặp lại bước so sánh trên với nửa đầu hoặc nửa sau của danh sách. Vì số lượng phần tử trong danh sách cần xem xét giảm đi một nửa sau mỗi bước, nên thời gian thực thi của thuật toán là hàm lôgarit. Thuật toán tìm kiếm nhị phân dùng để tìm kiếm phần tử trong một danh sách đã được sắp xếp, ví dụ như trong một danh bạ điện thoại sắp xếp theo tên, có thể tìm kiếm số điện thoại của một người theo tên người đó. Thuật toán tìm kiếm nhị phân chạy nhanh hơn tìm kiếm tuyến tính nhưng cũng có một số nhược điểm. Tìm kiếm nhị phân có thể chậm hơn bảng băm. Nếu nội dung danh sách bị thay đổi thì danh sách phải được sắp xếp lại trước khi sử dụng tìm kiếm nhị phân. Thao tác này thường tốn nhiều thời gian. Sau đây là mã giả của thuật toán tìm kiếm nhị phân. } Sau mỗi phép so sánh, số lượng phần tử trong danh sách cần xét giảm đi một nửa. Thuật toán kết thúc khi số lượng phần tử còn không quá 1. Vì vậy thời gian thực thi của thuật toán là O(log n). Theo Wikipedia.","relevance":1},{"title":"Thuật toán tìm kiếm nhị phân (Đệ quy) - Câu lạc bộ Visual Basic","url":"http:\/\/caulacbovb.com\/forum\/viewtopic.php?t=11826","content":".:: Nơi trao đổi về ngôn ngữ Visual Basic ::. Bỏ qua nội dung Điều hành viên: Điều hành Gửi bàigửi bởi dinhhungitsoft » CN 11\/04\/2010 12:39 am Gửi bàigửi bởi vo_minhdat2007 » CN 11\/04\/2010 9:32 am Gửi bàigửi bởi dinhhungitsoft » CN 11\/04\/2010 11:09 pm Quay về \u201CCấu trúc dữ liệu và giải thuật\u201D Đang xem chuyên mục này: Không có thành viên nào trực tuyến. và 1 khách ","relevance":1},{"title":"Bài 5: Các thuật toán sắp xếp và tìm kiếm cơ bản - Giáo trình FPT","url":"https:\/\/www.slideshare.net\/tuoitrecomvn\/slide-5-23855078","content":"Slideshare uses cookies to improve functionality and performance, and to provide you with relevant advertising. If you continue browsing the site, you agree to the use of cookies on this website. See our User Agreement and Privacy Policy. Slideshare uses cookies to improve functionality and performance, and to provide you with relevant advertising. If you continue browsing the site, you agree to the use of cookies on this website. See our Privacy Policy and User Agreement for details. Published on Jul 3, 2013 Tìm hiểu các giải thuật sắp xếp cơ bản trên cấu trúc dữ liệu mảng Tìm hiểu các giải thuật tìm kiếm cơ bản trên cấu trúc dữ liệu mảng Đánh giá và so sánh hiệu quả các giải thuật Be the first to comment LinkedIn Corporation © 2017   Clipping is a handy way to collect and organize the most important slides from a presentation. You can keep your great finds in clipboards organized around topics. Looks like you\u2019ve clipped this slide to already.","relevance":1},{"title":"Xác nhận truy cập - vt.lai Firewall 2.0","url":"http:\/\/sinhvienit.net\/forum\/thac-mac-code-thuat-toan-tim-kiem-nhi-phan-dung-de-tim-kiem-tren-thoi-khoa-bieu.437478.html","content":"","relevance":1},{"title":"Đề tài Xây dựng cây nhị phân tìm kiếm - Tài liệu, ebook, giáo trình","url":"http:\/\/doc.edu.vn\/tai-lieu\/de-tai-xay-dung-cay-nhi-phan-tim-kiem-72267\/","content":"Tài liệu - Ebook Thư viện tài liệu, ebook, đồ án, luận văn, giáo trình tham khảo cho học sinh, sinh viên  Mục lục Phần 1: Giới thiệu đề tài. Phần 2: Phân tích, thiết kế chương trình Phần 3: Giới thiệu các phương thức quan trọng trong chương trình Phần 4: Kết luận      Các file đính kèm theo tài liệu này: 92 trang | Lượt xem: 1516 | Lượt tải: 2 15 trang | Lượt xem: 5595 | Lượt tải: 25 93 trang | Lượt xem: 625 | Lượt tải: 3 286 trang | Lượt xem: 4477 | Lượt tải: 74 48 trang | Lượt xem: 1460 | Lượt tải: 14 46 trang | Lượt xem: 3366 | Lượt tải: 12 18 trang | Lượt xem: 2336 | Lượt tải: 12 16 trang | Lượt xem: 4940 | Lượt tải: 3 41 trang | Lượt xem: 827 | Lượt tải: 3 39 trang | Lượt xem: 738 | Lượt tải: 1 Copyright © 2014 Doc.edu.vn ","relevance":1},{"title":"Mối quan hệ giữa giải thuật sắp xếp và tìm kiếm - Cao đẳng công nghệ Viettronics Hải Phòng - Tuyển sinh Cao đẳng 2015","url":"http:\/\/viettronics.edu.vn\/trangchu\/index.php\/vi\/cac-khoa\/Tin-bai-cua-khoa\/Moi-quan-he-giua-giai-thuat-sap-xep-va-tim-kiem-300\/","content":"Những tin mới hơn Những tin cũ hơn","relevance":1},{"title":"[Chuyên đề] Tìm kiếm nhị phân (Chặt nhị phân)","url":"http:\/\/tinhocviet.forump.net\/t49-chuyen-e-tim-kiem-nhi-phan-chat-nhi-phan","content":"A place for learning and sharing knowledge  by Admin on Sun Jan 27, 2013 10:17 am  by pha96 on Mon Apr 15, 2013 5:15 pm ","relevance":1},{"title":"Các giải thuật tìm kiếm","url":"http:\/\/cnttk25.forumvi.com\/t5-topic","content":"Cao học CNTT - Khóa 25 - Học viện Kỹ thuật Quân sự (HTTT và KHMT) Tìm kiếm Display results as : Số bài Chủ đề Advanced Search  CNTT K25 :: Cao học CNTT K25 :: Các môn thi đầu vào cao học :: CTDL và GT      by hosytan on 2\/5\/2013, 13:31      CNTT K25 :: Cao học CNTT K25 :: Các môn thi đầu vào cao học :: CTDL và GT ","relevance":1},{"title":"[Cây] Một số phép toán trên cây nhị phân tìm kiếm - Nguyễn Văn Quân","url":"https:\/\/nguyenvanquan7826.com\/2013\/10\/20\/cay-mot-so-phep-toan-tren-cay-nhi-phan-tim-kiem\/","content":"[qads] Cây nhị phân tìm kiếm (CNPTK) là cây nhị phân trong đó tại mỗi nút, khóa của nút đang xét lớn hơn khóa của tất cả các nút thuộc cây con trái và nhỏ hơn khóa của tất cả các nút thuộc cây con phải. Dưới đây là một ví dụ về cây nhị phân tìm kiếm: Nội dung Cấu trúc cây Thêm phần tử vào cây Nhập cây Duyệt cây Tìm một node trong cây Xóa một node trong cây Code hoàn chỉnh tham khảo Nhờ ràng buộc về khóa trên CNPTK, việc tìm kiếm trở nên có định hướng. Hơn nữa, do cấu trúc cây việc tìm kiếm trở nên nhanh đáng kể. Nếu số nút trên cây là N thì chi phí tìm kiếm trung bình chỉ khoảng log2N. Vậy là ta đã có cấu trúc cây Tree. Giờ chúng ta sẽ thực hiện một số thao tác. Việc thêm một phần tử X vào cây phải bảo đảm điều kiện ràng buộc của CNPTK. Ta có thể thêm vào nhiều chỗ khác nhau trên cây, nhưng nếu thêm vào một nút lá sẽ là tiện lợi nhất do ta có thể thực hiên quá trình tương tự thao tác tìm kiếm. Khi chấm dứt quá trình tìm kiếm cũng chính là lúc tìm được chỗ cần thêm. Vậy là xong con ong. Việc nhập cây là việc lặp đi lặp lại chèn 1 phần tử vào cây đến một điều kiện nào đó thì dừng. Ở code dưới đây điều kiện dừng là nhập vào phần tử = 0. Việc nhập đã xong, tuy thế thôi nhưng nhiều người khi code không biết nhập cây kiểu gì :3 (mình đã từng bị như vậy) Thao tác duyệt cây trên cây nhị phân tìm kiếm hoàn toàn giống như trên cây nhị phân. Đặc biệt khi duyệt theo thứ tự giữa, trình tự các nút duyệt qua sẽ cho ta một dãy các nút theo thứ tự tăng dần của khóa. (1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 20, 23) Việc duyệt theo thứ tự trước hoặc sau các bạn làm tương tự. Việc tìm kiếm như trên mình đã nêu là rất đơn giản và nhanh đáng kể. Việc hủy một phần tử X ra khỏi cây phải bảo đảm điều kiện ràng buộc của CNPTK. Có 3 trường hợp khi hủy nút X có thể xảy ra: \u2013 X là nút lá: Đơn giản chỉ cần hủy X vì nó không móc nối đến phần tử nào khác. \u2013 X chỉ có 1 con (trái hoặc phải): Trước khi hủy X ta móc nối cha của X với con duy nhất của nó. \u2013 X có đủ cả 2 con: ta không thể hủy trực tiếp do X có đủ 2 con. Ta sẽ hủy gián tiếp. Thay vì hủy X, ta sẽ tìm một phần tử thế mạng Q. Phần tử này có tối đa một con. Thông tin lưu tại Q sẽ được chuyển lên lưu tại X. Sau đó, nút bị hủy thật sự sẽ là Y giống như 2 trường hợp đầu. Vấn đề là phải chọn Y sao cho khi lưu Q vào vị trí của X, cây vẫn là CNPTK. Có 2 phần tử thỏa mãn yêu cầu: + Phần tử nhỏ nhất (trái nhất) trên cây con phải. + Phần tử lớn nhất (phải nhất) trên cây con trái. Việc chọn lựa phần tử nào là phần tử thế mạng hoàn toàn phụ thuộc vào ý thích của người lập trình. Trong code này tôi chọn phần tử phải nhất.  Vậy là đã xóa xong một node. Đọc thêm: Chuyển cây nhị phân sang cây nhị phân tìm kiếm Good blog! I really love how it is easy on my eyes and the data are well written. I am wondering how I could be notified whenever a new post has been made. I have subscribed to your feed which must do the trick! Have a nice day! efdecfbbekke Thank you very much. You take care my blog. If you have a wordpress account and want follow me, you can click button \u201CFollow\u201D at top:  or you can back Home page and see at bottom. Enter your email and click button \u201CTheo dõi\u201D. I will send to your email whenever a new post has been made:  anh cho em hỏi là em code bằng java.nhưng em không hiểu 1 chỗ là T = (Node *) malloc(sizeof(Node)); có nghĩ là gì a? em rùng TNode root và ; class TNode{ int data; TNode left,right; TNode(int x){ data=x; left=right=null; } TNode(int x,TNode ll,TNode rr){ data=x; left=ll; right=rr; } } public class Demo { TNode root; int insertNode(TNode T,int x){ if(T!=null){ if(T.data==x) return -1; else{ if(T.data<x) return insertNode(T.right,x); else return insertNode(T.left,x); } } if (T == null) return 0; \/\/ khong du bo nho T.data = x; T.left = T.right = null; return 1; \/\/ ok } \/*int insert(int x){ return insertNode(root,x); }*\/ void nhapcay(TNode T){ int x; Scanner kb = new Scanner(System.in); while(true){ System.out.print(\"x= \"); x=kb.nextInt(); if(x==0) break; int check=insertNode(T,x); if (check == -1) System.out.println(\"Node da ton tai!\"); else if (check == 0) System.out.println(\"Khong du bo nho\"); } } void nhap(){ nhapcay(root); } void xuat(TNode T){ xuat(T.left); System.out.print(T.data); xuat(T.right); } void duyet(){ xuat(root); } public static void main(String[] agrs){ Demo a = new Demo(); a.nhap(); a.duyet(); } } Có nghĩa là cấp phát bộ nhớ cho Con trỏ T nhé. đấy là cấp phát bộ nhớ cho node T có kích thước bằng kích thước bằng kích thước của struct node nhé bạn !! Chào a! Thứ nhất e cảm ơn a về những chia sẻ của a trong blog của mình. Thứ hai, a có thể chia sẻ thêm cho về phương pháp học tập lập trình, cách thức học như thế nào để tiến bộ được không ạ? Cho e hỏi, trong ngành lập trình, cái gì là quan trọng nhất ạ? E không thông minh cho lắm, liệu có học tốt để trở thành lập trình viên được không ạ? 🙁 Thứ 3, e mong a chia sẻ một số tài liệu học mà a cho là hay và bổ ích. E cảm ơn a ạ! 🙂 Cách học lập trình thì mỗi người có một cách, tùy vào khả năng, sở thích\u2026 thường thì xem người khác code (hoặc xem code người khác) rồi code lại, code lại xong chạy ok thì sửa thành code của mình bằng cách tự đặt bài tập tương tự\u2026 Trong lập trình thì cũng tùy. Quan trọng nhất là luôn học & làm cái mới. Một số lĩnh vực như lập trình ứng dụng thì cần thêm thuật toán. Không thông minh như thế nào thì khi học mới biết được\u2026 Tài liệu của mình toàn google\u2026 chả bao giờ đọc sách luôn\u2026 ok cho em hỏi sao cứ nhập X mãi thế anh\u2026 :3 Cái này là nhập đến khi nào nhập số 0 thì dừng lại mà. 🙂 @@@\u2026 em mới vào nghề nên không hiểu lắm.. hi\u2026 thank anh 😛 e cảm ơn anh vì bài viết rất bổ ích với e. nhưng kh","relevance":1},{"title":"Các giải thuật tìm kiếm","url":"http:\/\/cnttk25.forumvi.com\/t5-topic","content":"Cao học CNTT - Khóa 25 - Học viện Kỹ thuật Quân sự (HTTT và KHMT) Tìm kiếm Display results as : Số bài Chủ đề Advanced Search  CNTT K25 :: Cao học CNTT K25 :: Các môn thi đầu vào cao học :: CTDL và GT      by hosytan on 2\/5\/2013, 13:31      CNTT K25 :: Cao học CNTT K25 :: Các môn thi đầu vào cao học :: CTDL và GT ","relevance":1},{"title":"Năm 2018 có vắcxin nội phòng bệnh tai xanh","url":"http:\/\/khoahocphattrien.vn\/khoa-hoc\/nam-2018-co-vacxin-noi-phong-benh-tai-xanh\/20170914095754792p1c160.htm","content":"Học viện Nông nghiệp Việt Nam đã nghiên cứu và sản xuất thử nghiệm hơn 200.000 liều vắcxin phòng bệnh tai xanh đạt yêu cầu vô trùng và an toàn tuyệt đối với thời gian bảo vệ là 4 tháng. Dự kiến trong năm tới, sản phẩm này sẽ được đưa ra thị trường.","relevance":0},{"title":"Sử dụng máy tính lượng tử mạnh nhất thế giới, các nhà nghiên cứu tái tạo chính xác được một phân tử và điều này rất quan trọng","url":"https:\/\/tinybook.net\/su-dung-may-tinh-luong-tu-manh-nhat-the-gioi-cac-nha-nghien-cuu-tai-tao-chinh-xac-duoc-mot-phan-tu-va-dieu-nay-rat-quan-trong.pgsZ-qvHXSxTzzsXUA","content":"Bằng hệ thống máy tính lượng tử mạnh nhất thế giới IBM Q, các kĩ sư đã dựng nên được cấu trúc phân tử của BeH2- một phân tử dù với chỉ hai hydro và một Beri nhưng vẫn rất phức tạp. Điều đó khiến thành công này trở thành một bước nhảy vọt không hề nhỏ trong công nghệ máy tính lượng tử và cả trong ngành hóa học. Việc dựng mô hình giả lập của phân tử thì chẳng có gì mới, các hệ thống máy tính cổ điển đều có thể tạo nên những mô hình chi tiết của những chất hóa học có tới 3 nguyên tử. Nhưng kể cả những siêu máy tính mạnh mẽ nhất cũng gặp khó khăn trong việc theo dõi những tác động lượng tử của các electron mới xuất hiện trong các mối liên kết của phân tử, đó lại là lĩnh vực chuyên môn của máy tính lượng tử. Những thiết bị mạnh mẽ này đang được nhiều nơi, nhiều tổ chức đầu tư nghiên cứu, mở ra một cuộc đua nhằm đạt được \u201Cuy thế lượng tử tối cao, ngôi vương lượng tử \u2013 quantum supremacy\u201D. Đích cuối của họ là tạo ra được một máy tính lượng tử có thể vượt mặt được khả năng tính toán máy tính cổ điển, có thể mang vào đời sống để sử dụng. Bên trong chiếc máy tính lượng tử. Không sử dụng hệ nhị phân gồm 0 và 1 để lưu trữ dữ liệu, máy tính lượng tử sử dụng qubit \u2013 quantum bit, bit lượng tử, cho phép máy tính ghi dữ liệu ở nhiều trạng thái cùng lúc (ví dụ có thể là 0, có thể là 1 hoặc có thể cùng lúc là 0 và 1), cho phép nó xử lý được những phép tính phức tạp hơn. Một trong những điều khó khăn trong việc sử dụng một hệ thống máy tính lượng tử, đó là phải giữ qubit ở một trạng thái ổn định nhất định, đủ lâu để có thể thực hiện phép tính. Máy tính lượng tử có càng nhiều qubit thì càng mạnh, nhưng cũng đồng thời càng khó điều khiển. Đó là lý do vì sao máy tính lượng tử lại được tin tưởng giao phó trách nhiệm dựng nên mô hình của phân tử BeH2. Hóa học không đơn giản vậy đâu, và cái mô hình electron bay quanh hạt nhân không thực sự chính xác lắm. Có rất nhiều trường hợp có thể xảy ra, và sẽ ngày một phức tạp nếu như xung quanh các electron ấy xuất hiện thêm các hạt mới. Thông thường, các nhà vật lý học sẽ sử dụng những phương pháp xử lý tắt để vượt qua vấn đề khó khăn này. Nhưng khi mà số lượng các hạt mang điện tăng lên, những \u201Clối tắt\u201D ấy sẽ vô dụng. Đó là lúc máy tính lượng tử thể hiện khả năng tính toán nhanh và siêu việt của mình: nó có thể tìm ra được những trạng thái chất một cách nhanh chóng. Mục đích của việc tính toán sẽ là tạo ra một thuật toán hiệu quả để mô tả được mọi trường hợp của cách sắp xếp hạt trong phân tử gồm 3 nguyên tử trên. Họ đã thành công, cho thấy khả năng vượt trội của máy tính lượng tử trong tính toán, và tương lai xán lạn đang đứng trước mắt nó. Cái ngày máy tính lượng tử vượt mặt được máy tính cổ điển có vẻ đang tới gần rồi. Hiện máy IBM Q của IBM là máy tính lượng tử mạnh nhất thế giới với 17 qubit \u2013 nhiều người cho rằng \u201Cuy thế lượng tử tối cao\u201D sẽ được thiết lập tại mốc 50 qubit. Khi thời điểm ấy đến, không chỉ ngành hóa học được hưởng lợi \u2013 đừng để thí nghiệm này đánh lừa bạn! Mọi ngành, mọi khía cạnh sẽ được cải thiện đáng kể: từ nghiên cứu phát triển trí tuệ nhân tạo cho tới cách thức các công ty giao hàng tới từng nhà. Phòng thí nghiệm máy tính lượng tử tại IBM.","relevance":0},{"title":"Vị cư sĩ trợ lý đặc biệt cho Tổng thống Hoa Kỳ Donald Trump | phatgiao.org.vn","url":"http:\/\/phatgiao.org.vn\/quoc-te\/201709\/Vi-cu-si-tro-ly-dac-biet-cho-Tong-thong-Hoa-Ky-donald-Trump-28453\/","content":"","relevance":0},{"title":"[Help] - Cầu người đả tự bộ Mịch Tiên Lộ | Page 8 | Bạch Ngọc Sách","url":"https:\/\/bachngocsach.com\/forum\/threads\/16777\/page-8","content":"\"Quân tử kính mà không lỗi, đối xử người khiêm cung mà không vô lễ. Trong bốn biển đều là anh em một nhà cả\" - Luận Ngữ Dãn cách tên bằng dấu phẩy(,). Những cái LIKE và những lời cảm ơn là nguồn động lực để các dịch giả và converter tiếp tục cống hiến sức lực cho cộng đồng. Nếu bạn đã từng một lần muốn hỏi: vì sao còn chưa có chương mới?, xin biết rằng, không chỉ riêng bạn cần dịch giả và converter, mà họ cũng cần bạn nữa. Xin hãy động viên dịch giả và converter bằng cách đăng-ký (miễn phí) và đăng-nhập vào diễn đàn, để bạn có thể bấm những nút LIKE, để các dịch giả và converter còn biết rằng: Có người vẫn đang dõi theo thành quả của họ. Thảo luận trong 'Tầm Thư Các' bắt đầu bởi Tiểu Hắc, 11\/8\/17. ▲","relevance":0},{"title":"4 phẩm chất cao quý nhất của người được Trời ban phúc lành, đạo lý nghìn năm nguyên giá trị - Đại Kỷ Nguyên","url":"http:\/\/www.daikynguyenvn.com\/van-hoa\/4-pham-chat-cao-quy-nhat-cua-nguoi-duoc-troi-ban-phuc-lanh-dao-ly-nghin-nam-nguyen-gia-tri.html","content":"3:18 pm - 21\/09\/2017 Bản In Cỡ Chữ + Cỡ Chữ - Tinh hoa xử thế, làm người của cổ nhân luôn là kho tàng quý báu chứa đựng những bài học nhân sinh sâu sắc cho hậu thế nghìn năm. Sự minh triết, thấu hiểu lẽ đời, đạo Trời của họ đôi khi khiến chúng ta phải giật mình tự đứng trước gương mà soi lại bản thân. Con người sinh ra trong bể khổ, một đời bôn tẩu ngược xuôi rồi trăm năm lại qua như mộng ảo. Phật gia giảng, làm người là phải chịu khổ, khổ về tâm chí, khổ về thân thể, cuối cùng là trôi trong cái khổ mênh mông của lục đạo luân hồi nghìn vạn kiếp. Để thoát khỏi cái khổ trùng trùng ấy, người ta phải đặt công phu vào tu dưỡng chính mình. Dưới đây là 4 loại người có thể vượt ra khỏi bể trầm luân ấy. Đạo Trời đền đáp người cần cù  \u201CChu Dịch\u201D viết: \u201CTrời biến đổi mạnh mẽ không ngừng, người quân tử theo đạo ấy mà không ngừng tự vươn lên\u201D (Thiên hành kiện, quân tử dĩ tự cường bất tức). Ý tứ của nó chính là đời người phải lấy siêng năng, cần cù làm trọng. Người chăm chỉ, cần cù chính là hợp với đạo Trời, ý Trời, sẽ được phù hộ. Đây chính là đạo lý \u201CThiên Đạo thù cần\u201D (Đạo Trời đền đáp người cần cù). Tăng Quốc Phiên (1811 \u2013 1872) là danh Nho lỗi lạc, công thần số một cuối thời nhà Thanh, từng dẹp yên khởi nghĩa Thái Bình Thiên Quốc. Tấm gương tu thân dưỡng tính của ông khiến hậu thế phải nghiêng mình kính nể. Nhưng họ Tăng vốn không phải là người thông minh Trời phú, thậm chí tư chất của ông còn có vẻ kém cỏi người bình thường. Có giai thoại kể rằng, thời thiếu niên ông ở nhà đọc sách. Một đêm, có tên trộm lẩn vào nhà, nấp trên xà ngang, có ý đợi Tăng Quốc Phiên đọc sách xong đi ngủ sẽ khua khoắng một phen. Thế nhưng đợi mãi mà họ Tăng vẫn cứ ngồi lì trước đèn, lật qua lật lại, đọc tới đọc lui một bài văn. Tên trộm sốt ruột, không cầm nổi giận dữ, nhảy ra quát lên: \u201CNgu tối như ngươi thì đọc được sách gì?\u201C. Rồi hắn lập tức đọc thuộc lòng một lượt bài văn này, đoạn nghênh ngang bỏ đi để lại chủ nhà còn đương ngơ ngác. Nhưng Tăng Quốc Phiên không vì vậy mà nản chí. Sau này, ông lại càng siêng năng, hiếu học, tu thân dưỡng tính, cuối cùng trở thành đại danh Nho, kinh luân đầy bụng, ra ngoài làm tướng vào triều làm quan, được sử xanh lưu danh đời đời. Còn tên trộm láu lỉnh, thông minh kia thì bị vùi lấp vĩnh viễn trong dòng sông dài của lịch sử. Người biết nỗ lực, cần cù, thuận theo tự nhiên mà gắng công bỏ sức thì chính là sống hợp với Đạo Trời. Bởi hợp với Đạo Trời nên họ sẽ được Trời chở che, nâng đỡ, đáp đền. Tăng Quốc Phiên tư chất chậm chạp, kém cỏi nhưng nhờ cần cù, sống theo Đạo Trời, tự tu chính mình nên mới được phúc báo lớn đến vậy. Người xưa nói: \u201CThuận theo Đạo Trời thì hưng, ngược với Đạo Trời thì suy\u201C, quả là đúng vậy thay! Đạo của Đất đền đáp người thiện lương Đó chính là: \u201CĐịa Đạo thù thiện\u201C, ý tứ lấy từ một quẻ bói của Chu Dịch: \u201CĐất có thế của quẻ Khôn, người quân tử lấy đức dày mà nâng đỡ vạn vật\u201D (Địa thế Khôn, quân tử dĩ hậu đức tải vật). Người ta thuận theo đạo của Đất, ôn nhu, mềm dẻo mà chở che, khoan dung vạn sự vạn vật thì sẽ đắc phúc báo. Vào thời Xuân Thu (722 \u2013 481 TCN), ở Ế Tang, Triệu Thuẫn (quyền thần nước Tấn) chợt nhìn thấy một người sắp chết đói bên đường. Ông liền cho anh ta thực phẩm. Người bị đói lại chỉ ăn một nửa, còn một nửa gói ghém cẩn thận. Triệu Thuẫn lấy làm lạ, thắc mắc hỏi nguyên do. Người đó nói muốn đem đồ ăn này giữ lại cho mẹ mình. Triệu Thuẫn cảm thương lòng hiếu thảo, để người đó ăn uống thỏa thích, lại chuẩn bị một mâm cơm thịt cho anh ta đem về dâng mẹ. Về sau Tấn Linh Công tập kích, định giết Triệu Thuẫn. Ngay trong lúc ngàn cân treo sợi tóc, giáp sĩ của Linh Công đuổi gấp sau lưng, bỗng đâu có một võ sĩ xông ra chặn đường, đánh bật quân địch trở lại, cứu thoát Triệu Thuẫn. Bấy giờ, sau khi thoát nạn hoàn hồn, Triệu Thuẫn mới ấp úng tạ ơn và hỏi lai lịch người anh hùng nọ. Người đó trả lời: \u201CTôi chính là người bị đói ở Ế Tang năm xưa, nhờ được minh công cứu giúp một bát cơm, lại cho cơm mang về dâng mẹ. Ơn ấy nay phải trả!\u201C. Triệu Thuẫn bấy giờ mới cả mừng hỏi tên tuổi. Thì ra người ấy chính là Linh Chiếp, một trong những hiệp sĩ nổi tiếng thời Xuân Thu. Đạo của Thương nghiệp đền đáp người giữ chữ tín Đạo lý: \u201CThương Đạo thù tín\u201D này lấy từ một câu trong \u201CLuận Ngữ\u201D: \u201CNgười không có uy tín thì chẳng thể lập thân\u201D (Nhân vô tín bất lập). Trong công việc kinh doanh, giữ được sự thành thật và chữ tín thì mọi việc đều thuận lợi. Hồ Tuyết Nham (1823 \u2013 1885) là thương gia giàu nhất Hàng Châu cuối thế kỷ 19. Xuất thân nghèo khó nhưng bằng tài năng và nỗ lực của mình, ông đã trở thành thương gia giàu có nhất Hàng Châu. Hồ Tuyết Nham luôn giữ được sự thành tín trong kinh doanh. Ông khởi nghiệp bằng nghề kinh doanh hiệu thuốc. Thuốc ở tiệm của ông đều là hàng thật, đúng giá, lại rất chất lượng. Ví như để chế tạo \u201CKim Lộc Hoàn\u201D cần phải có đủ hơn 30 loại lộc hươu. Để bảo đảm chất lượng nguyên liệu, Hồ Tuyết Nham không tiếc tiền, bỏ vốn mở một bãi đất nuôi hươu lấy lộc. Nguyên tắc làm ăn của ông chính là không để đối phương chịu tổn thương, giao dịch phải là đôi bên cùng có lợi, không vì chiếm phần lợi nhỏ của mình mà làm tổn hại đến \u201CThương Đạo\u201D. Có người đến cầm cố gia sản để lấy vốn mở rộng kinh doanh, ông sẵn sàng cho cầm cố với mức giá cao nhất, còn cao hơn cả giá thị trường, không vì người khác khó khăn mà ép giá, trục lợi. Hồ Tuyết Nham có một câu nói nổi tiếng: \u201CAi cũng có ngày mưa không mang theo dù, hãy cho họ dùng nhờ\u201C. Sự thành tín không chỉ tạo dựng nên sản nghiệp lớn mà còn ghi tiếng tăm ông vào sử sách. Đạo của nghề nghiệp đền đáp cho người dốc lòng chuyên tâm Đây chính là đạo lý: \u201CNghiệp đạo thù tinh\u201C. Trong \u201CTiến Học Giải\u201D của Hàn Dũ viết: \u201CNghề nghi","relevance":0},{"title":"Tại sao chủ nghĩa tân tự do kinh tế đã hết thời?Nghiên cứu quốc tế","url":"http:\/\/nghiencuuquocte.org\/2017\/09\/21\/tai-sao-chu-nghia-tan-tu-kinh-te-da-het-thoi\/","content":"Nguồn: Sebastian Buckup, \u201CA New Course for Economic Liberalism\u201D, Project Syndicate, 12\/07\/2017. Biên dịch: Trần Hoàng Nhị | Biên tập: Lê Hồng Hiệp Kể từ cuộc Cách mạng Nông nghiệp, tiến bộ công nghệ luôn luôn thúc đẩy các lực lượng mang tính khuếch tán và tập trung đối lập nhau. Sự khuếch tán xảy ra khi các quyền lực và đặc quyền cũ bị xói mòn; sự tập trung xảy ra khi quyền lực và tầm với của những người đang kiểm soát các năng lực mới được mở rộng. Về phương diện này, cái gọi là cuộc Cách mạng Công nghiệp lần Thứ tư sẽ không phải là ngoại lệ. Hiện tại, mâu thuẫn giữa khuếch tán và tập trung đang gia tăng ở mọi cấp độ của nền kinh tế. Trong suốt những năm 1990 và đầu những năm 2000, thương mại tăng trưởng nhanh gấp đôi GDP, đưa hàng trăm triệu người thoát khỏi đói nghèo. Nhờ toàn cầu hoá về vốn và tri thức, các nước có thể chuyển các nguồn lực sang các lĩnh vực có năng suất và tiền lương cao hơn. Tất cả những điều này góp phần vào việc khuếch tán sức mạnh thị trường. Nhưng sự khuếch tán này diễn ra đồng thời với sự tập trung cũng mạnh mẽ như thế. Ở cấp độ ngành, một vài ngành công nghiệp then chốt \u2013 đáng chú ý nhất là ngành tài chính và công nghệ thông tin \u2013 chiếm tỷ trọng ngày càng tăng trong lợi nhuận. Ví dụ, ở Hoa Kỳ, ngành tài chính chỉ tạo ra 4% việc làm, nhưng chiếm hơn 25% lợi nhuận doanh nghiệp. Và một nửa trong số các công ty Mỹ có lợi nhuận từ 25% trở lên là các công ty công nghệ. Điều này cũng xảy ra ở cấp tổ chức. 10% các doanh ngiệp có lợi nhuận cao nhất ở Mỹ có lợi nhuận cao gấp tám lần mức lợi nhuận của một doanh nghiệp trung bình. Trong những năm 1990, bội số này chỉ là 3. Những tác động của sự tập trung như vậy giúp rất nhiều cho việc giải thích sự bất bình đẳng về kinh tế đang ngày càng gia tăng. Nghiên cứu của Cesar Hidalgo và các đồng nghiệp của ông tại MIT cho thấy, ở những nước có tập trung ngành giảm trong những thập niên gần đây, như Hàn Quốc, sự bất bình đẳng về thu nhập đã giảm. Ở những nơi mà tập trung của ngành tăng lên, như Na Uy, bất bình đẳng đã tăng lên. Có thể thấy một xu hướng tương tự ở cấp tổ chức. Một nghiên cứu gần đây của Erling Bath, Alex Bryson, James Davis, và Richard Freeman cho thấy sự khuếch tán (hay chênh lệch \u2013 NBT) trong mức lương từ những năm 1970 có liên quan đến sự khác biệt về tiền lương giữa các công ty với nhau, chứ không phải trong nội bộ các công ty. Các nhà kinh tế học Nicholas Bloom và David Price của Stanford đã xác nhận điều này, và lập luận rằng hầu như toàn bộ sự gia tăng về bất bình đẳng thu nhập ở Mỹ bắt nguồn từ sự gia tăng khoảng cách giữa các mức lương trung bình mà các doanh nghiệp chi trả. Những kết quả như vậy bắt nguồn từ không chỉ những thay đổi cơ cấu không thể tránh được mà còn cả các quyết định về cách xử lý những thay đổi đó. Vào cuối những năm 1970, khi chủ nghĩa tân tự do có ảnh hưởng mạnh, các nhà hoạch định chính sách trở nên ít quan ngại việc các công ty lớn chuyển lợi nhuận thành ảnh hưởng chính trị. Thay vào đó, họ lo rằng các chính phủ đang bảo vệ các công ty không có sức cạnh tranh. Với ý nghĩ này, các nhà hoạch định chính sách bắt đầu dỡ bỏ các quy định và luật lệ về kinh tế đã được thực hiện từ sau cuộc Đại suy thoái (1929-1933), và khuyến khích các vụ sáp nhập theo chiều dọc và ngang. Những quyết định này đóng một vai trò quan trọng trong việc tạo ra một làn sóng toàn cầu hóa mới, làm tăng sự lan rộng của tăng trưởng và thịnh vượng khắp các quốc gia, nhưng cũng đặt nền tảng cho sự tập trung của thu nhập và sự giàu có trong nội bộ từng quốc gia. Dạng \u201Ckinh tế số\u201D (platform economy) đang phát triển là một ví dụ. Tại Trung Quốc, công ty thương mại điện tử khổng lồ Alibaba đang dẫn đầu một nỗ lực rất lớn để kết nối khu vực nông thôn với các thị trường quốc gia và toàn cầu, bao gồm cả nền tảng Taobao kết nối người tiêu dùng với người tiêu dùng. Nỗ lực này dẫn đến sự khuếch tán đáng kể: Tại hơn 1.000 cộng đồng người Hoa ở nông thôn \u2013 cái gọi là những \u201CLàng Taobao\u201D \u2013 hơn 10% dân số kiếm sống bằng cách bán sản phẩm trên Taobao. Tuy nhiên, khi Alibaba xây dựng một nền kinh tế bao trùm gồm hàng triệu công ty đa quốc gia nhỏ tham gia vào nền kinh tế, Alibaba cũng đang mở rộng sức mạnh thị trường của chính mình. Giờ đây, các nhà hoạch định chính sách cần một cách tiếp cận mới chống lại sự tập trung quá mức. Sự tập trung này có thể làm tăng hiệu quả, nhưng cũng cho phép các công ty tích trữ lợi nhuận và đầu tư ít hơn. Tất nhiên, Joseph Schumpeter có lập luận nổi tiếng là không cần phải lo lắng quá nhiều về đặc lợi của độc quyền, bởi vì sự cạnh tranh sẽ nhanh chóng xóa đi lợi thế đó. Nhưng thực tế hoạt động của các công ty trong những thập niên gần đây lại cho thấy một bức tranh khác: 80% số công ty có lợi nhuận từ 25% trở lên vào năm 2003 vẫn duy trì được mức này 10 năm sau đó. (Trong những năm 1990, tỷ trọng này vào khoảng 50%.) Để chống lại sự tập trung như vậy, trước tiên các nhà hoạch định chính sách cần thực hiện các luật cạnh tranh thông minh hơn, không chỉ tập trung vào thị phần hay quyền định giá, mà còn vào nhiều hình thức tìm kiếm đặc lợi, từ các quy định về bản quyền và bằng sáng chế cho phép người đang giữ quyền có thể kiếm tiền từ các khám phá cũ, cho đến việc lạm dụng tầm quan trọng của họ trong mạng lưới (internet). Câu hỏi không phải là \u201Clớn như thế nào là quá lớn\u201D, mà là làm sao để phân biệt giữa cái lớn \u201Ctốt\u201D và cái lớn \u201Cxấu\u201D. Câu trả lời phụ thuộc vào cách doanh nghiệp cân bằng giữa việc chiếm giữ giá trị và tạo ra giá trị. Hơn nữa, các nhà hoạch định chính sách cần tạo điều kiện dễ dàng hơn cho các doanh nghiệp khởi nghiệp (start-ups) mở rộng quy mô. Một hệ sinh thái kinh doanh sôi động vẫn là liều thu","relevance":0}]}]}